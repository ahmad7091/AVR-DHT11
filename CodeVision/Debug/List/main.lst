
AVRASM ver. 2.1.30  C:\Users\mrsfdri\Desktop\github\AVR-DHT11\CodeVision\Debug\List\main.asm Sun Apr 01 13:59:34 2018

C:\Users\mrsfdri\Desktop\github\AVR-DHT11\CodeVision\Debug\List\main.asm(1086): warning: Register r5 already defined by the .DEF directive
C:\Users\mrsfdri\Desktop\github\AVR-DHT11\CodeVision\Debug\List\main.asm(1087): warning: Register r4 already defined by the .DEF directive
C:\Users\mrsfdri\Desktop\github\AVR-DHT11\CodeVision\Debug\List\main.asm(1088): warning: Register r7 already defined by the .DEF directive
C:\Users\mrsfdri\Desktop\github\AVR-DHT11\CodeVision\Debug\List\main.asm(1089): warning: Register r6 already defined by the .DEF directive
C:\Users\mrsfdri\Desktop\github\AVR-DHT11\CodeVision\Debug\List\main.asm(1090): warning: Register r9 already defined by the .DEF directive
C:\Users\mrsfdri\Desktop\github\AVR-DHT11\CodeVision\Debug\List\main.asm(1091): warning: Register r8 already defined by the .DEF directive
C:\Users\mrsfdri\Desktop\github\AVR-DHT11\CodeVision\Debug\List\main.asm(1092): warning: Register r11 already defined by the .DEF directive
C:\Users\mrsfdri\Desktop\github\AVR-DHT11\CodeVision\Debug\List\main.asm(1093): warning: Register r10 already defined by the .DEF directive
C:\Users\mrsfdri\Desktop\github\AVR-DHT11\CodeVision\Debug\List\main.asm(1094): warning: Register r13 already defined by the .DEF directive
C:\Users\mrsfdri\Desktop\github\AVR-DHT11\CodeVision\Debug\List\main.asm(1095): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _bit_count=R5
                 	.DEF _c=R4
                 	.DEF _i_rh=R7
                 	.DEF _d_rh=R6
                 	.DEF _i_temp=R9
                 	.DEF _d_temp=R8
                 	.DEF _check=R11
                 	.DEF _cl=R10
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c04a      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G102:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G102:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001c 0000
00001d 0000      	.DB  0x0,0x0,0x0,0x0
00001e 0000
C:\Users\mrsfdri\Desktop\github\AVR-DHT11\CodeVision\Debug\List\main.asm(1133): warning: .cseg .db misalignment - padding zero byte
00001f 0000      	.DB  0x0,0x0,0x0
                 
                 _0x0:
000020 6547
000021 6b65
000022 6154
000023 2e62      	.DB  0x47,0x65,0x65,0x6B,0x54,0x61,0x62,0x2E
000024 7269
000025 5400
000026 203a
000027 4800      	.DB  0x69,0x72,0x0,0x54,0x3A,0x20,0x0,0x48
000028 203a
000029 4500
C:\Users\mrsfdri\Desktop\github\AVR-DHT11\CodeVision\Debug\List\main.asm(1138): warning: .cseg .db misalignment - padding zero byte
00002a 0000      	.DB  0x3A,0x20,0x0,0x45,0x0
                 _0x2000003:
00002b c080      	.DB  0x80,0xC0
                 _0x2020060:
C:\Users\mrsfdri\Desktop\github\AVR-DHT11\CodeVision\Debug\List\main.asm(1142): warning: .cseg .db misalignment - padding zero byte
00002c 0001      	.DB  0x1
                 _0x2020000:
00002d 4e2d
00002e 4e41
00002f 4900
000030 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\mrsfdri\Desktop\github\AVR-DHT11\CodeVision\Debug\List\main.asm(1145): warning: .cseg .db misalignment - padding zero byte
000031 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000032 0007      	.DW  0x07
000033 0004      	.DW  0x04
000034 0038      	.DW  __REG_VARS*2
                 
000035 000b      	.DW  0x0B
000036 0160      	.DW  _0x1A
000037 0040      	.DW  _0x0*2
                 
000038 0004      	.DW  0x04
000039 016b      	.DW  _0x1A+11
00003a 004b      	.DW  _0x0*2+11
                 
00003b 0004      	.DW  0x04
00003c 016f      	.DW  _0x1A+15
00003d 004f      	.DW  _0x0*2+15
                 
00003e 0002      	.DW  0x02
00003f 0173      	.DW  _0x1A+19
000040 0053      	.DW  _0x0*2+19
                 
000041 0002      	.DW  0x02
000042 0175      	.DW  _0x1A+21
000043 0053      	.DW  _0x0*2+19
                 
000044 0002      	.DW  0x02
000045 0177      	.DW  __base_y_G100
000046 0056      	.DW  _0x2000003*2
                 
000047 0001      	.DW  0x01
000048 017c      	.DW  __seed_G101
000049 0058      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00004a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004b 94f8      	CLI
00004c 27ee      	CLR  R30
00004d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004e e0f1      	LDI  R31,1
00004f bffb      	OUT  GICR,R31
000050 bfeb      	OUT  GICR,R30
000051 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000052 e08d      	LDI  R24,(14-2)+1
000053 e0a2      	LDI  R26,2
000054 27bb      	CLR  R27
                 __CLEAR_REG:
000055 93ed      	ST   X+,R30
000056 958a      	DEC  R24
000057 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000058 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000059 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005b 93ed      	ST   X+,R30
00005c 9701      	SBIW R24,1
00005d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005e e6e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000060 9185      	LPM  R24,Z+
000061 9195      	LPM  R25,Z+
000062 9700      	SBIW R24,0
000063 f061      	BREQ __GLOBAL_INI_END
000064 91a5      	LPM  R26,Z+
000065 91b5      	LPM  R27,Z+
000066 9005      	LPM  R0,Z+
000067 9015      	LPM  R1,Z+
000068 01bf      	MOVW R22,R30
000069 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006a 9005      	LPM  R0,Z+
00006b 920d      	ST   X+,R0
00006c 9701      	SBIW R24,1
00006d f7e1      	BRNE __GLOBAL_INI_LOOP
00006e 01fb      	MOVW R30,R22
00006f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000070 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000071 bfed      	OUT  SPL,R30
000072 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000073 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000074 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000075 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000076 c032      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * main.c
                 ; *
                 ; * Created: 4/1/2018 2:04:40 AM
                 ; * Author: mrsfdri
                 ; */
                 ;
                 ;// add header file
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <mega8.h>
                 ;// delay
                 ;#include <delay.h>
                 ;// lcd
                 ;#include <alcd.h>
                 ;// convert bit to number
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;
                 ;// count bit
                 ;unsigned char bit_count = 0;
                 ;// feedback count bit return
                 ;unsigned char c = 0;
                 ;// temperature and humidity value
                 ;unsigned char i_rh, d_rh, i_temp, d_temp, check;
                 ;// loop count
                 ;unsigned char cl = 0;
                 ;
                 ;//***** start methods *****//
                 ;
                 ;void request(void)
                 ; 0000 001F {
                 
                 	.CSEG
                 _request:
                 ; .FSTART _request
                 ; 0000 0020 	// DDRD.6 = 1;
                 ; 0000 0021 	DDRD |= (1<<0);
000077 9a88      	SBI  0x11,0
                 ; 0000 0022 
                 ; 0000 0023 	// PORTD.6 = 0;
                 ; 0000 0024 	PORTD &= ~(1<<0);
000078 9890      	CBI  0x12,0
                 ; 0000 0025 
                 ; 0000 0026 	// delay_ms(18);
                 ; 0000 0027 	delay_ms(18);
000079 e1a2      	LDI  R26,LOW(18)
00007a d141      	RCALL SUBOPT_0x0
                 ; 0000 0028 
                 ; 0000 0029 	// PORTD.6 = 1;
                 ; 0000 002A 	PORTD |= (1<<0);
00007b 9a90      	SBI  0x12,0
                 ; 0000 002B }
00007c 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void response()
                 ; 0000 0030 {
                 _response:
                 ; .FSTART _response
                 ; 0000 0031 	// PIND
                 ; 0000 0032 	DDRD &= ~(1<<0);
00007d 9888      	CBI  0x11,0
                 ; 0000 0033 
                 ; 0000 0034 	while(PIND & (1<<0))
                 _0x3:
00007e 9b80      	SBIS 0x10,0
00007f c007      	RJMP _0x5
                 ; 0000 0035 	{
                 ; 0000 0036 		delay_us(1);
                +
000080 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000081 958a     +DEC R24
000082 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0037 		cl++;
000083 94a3      	INC  R10
                 ; 0000 0038 		if (cl > 80) break;
000084 e5e0      	LDI  R30,LOW(80)
000085 15ea      	CP   R30,R10
000086 f7b8      	BRSH _0x3
                 ; 0000 0039 	}
                 _0x5:
                 ; 0000 003A 
                 ; 0000 003B 	cl = 0;
000087 24aa      	CLR  R10
                 ; 0000 003C 	while((PIND & (1<<0))==0)
                 _0x7:
000088 9980      	SBIC 0x10,0
000089 c002      	RJMP _0x9
                 ; 0000 003D 	{
                 ; 0000 003E 		delay_us(40);
00008a d133      	RCALL SUBOPT_0x1
                 ; 0000 003F 		cl++;
                 ; 0000 0040 		if (cl > 2) break;
00008b f7e0      	BRSH _0x7
                 ; 0000 0041 	}
                 _0x9:
                 ; 0000 0042 
                 ; 0000 0043 	cl = 0;
00008c 24aa      	CLR  R10
                 ; 0000 0044 	while(PIND & (1<<0))
                 _0xB:
00008d 9b80      	SBIS 0x10,0
00008e c002      	RJMP _0xD
                 ; 0000 0045 	{
                 ; 0000 0046 		delay_us(40);
00008f d12e      	RCALL SUBOPT_0x1
                 ; 0000 0047 		cl++;
                 ; 0000 0048 		if (cl > 2) break;
000090 f7e0      	BRSH _0xB
                 ; 0000 0049 	}
                 _0xD:
                 ; 0000 004A }
000091 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;unsigned char recive()
                 ; 0000 004F {
                 _recive:
                 ; .FSTART _recive
                 ; 0000 0050 	while(bit_count<8)
                 _0xF:
000092 e0e8      	LDI  R30,LOW(8)
000093 165e      	CP   R5,R30
000094 f488      	BRSH _0x11
                 ; 0000 0051 	{
                 ; 0000 0052 		bit_count++;
000095 9453      	INC  R5
                 ; 0000 0053 
                 ; 0000 0054 		while((PIND & (1<<0))==0);
                 _0x12:
000096 9b80      	SBIS 0x10,0
000097 cffe      	RJMP _0x12
                 ; 0000 0055 
                 ; 0000 0056 		delay_us(30);
                +
000098 e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
000099 958a     +DEC R24
00009a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0000 0057 
                 ; 0000 0058 		if(PIND & (1<<0))
00009b 9b80      	SBIS 0x10,0
00009c c005      	RJMP _0x15
                 ; 0000 0059 		{
                 ; 0000 005A 			c=(c<<1)|(0x01);
00009d 2de4      	MOV  R30,R4
00009e 0fee      	LSL  R30
00009f 60e1      	ORI  R30,1
0000a0 2e4e      	MOV  R4,R30
                 ; 0000 005B 		} else {
0000a1 c001      	RJMP _0x16
                 _0x15:
                 ; 0000 005C 			c=c<<1;
0000a2 0c44      	LSL  R4
                 ; 0000 005D 		}
                 _0x16:
                 ; 0000 005E 		while(PIND & (1<<0));
                 _0x17:
0000a3 9980      	SBIC 0x10,0
0000a4 cffe      	RJMP _0x17
                 ; 0000 005F 	}
0000a5 cfec      	RJMP _0xF
                 _0x11:
                 ; 0000 0060 
                 ; 0000 0061 	bit_count=0;
0000a6 2455      	CLR  R5
                 ; 0000 0062 
                 ; 0000 0063 	return c;
0000a7 2de4      	MOV  R30,R4
0000a8 9508      	RET
                 ; 0000 0064 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0067 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0068 	unsigned char data[5];
                 ; 0000 0069 
                 ; 0000 006A 	// Initial LCD
                 ; 0000 006B 	lcd_init(16);
0000a9 9725      	SBIW R28,5
                 ;	data -> Y+0
0000aa e1a0      	LDI  R26,LOW(16)
0000ab d0b7      	RCALL _lcd_init
                 ; 0000 006C 
                 ; 0000 006D 
                 ; 0000 006E 	lcd_clear();
0000ac d080      	RCALL _lcd_clear
                 ; 0000 006F 	lcd_gotoxy(0, 0);
0000ad e0e0      	LDI  R30,LOW(0)
0000ae 93ea      	ST   -Y,R30
0000af e0a0      	LDI  R26,LOW(0)
0000b0 d06f      	RCALL _lcd_gotoxy
                 ; 0000 0070 	lcd_puts("GeekTab.ir");
                +
0000b1 e6a0     +LDI R26 , LOW ( _0x1A + ( 0 ) )
0000b2 e0b1     +LDI R27 , HIGH ( _0x1A + ( 0 ) )
                 	__POINTW2MN _0x1A,0
0000b3 d09e      	RCALL _lcd_puts
                 ; 0000 0071 	delay_ms(1000);
0000b4 eea8      	LDI  R26,LOW(1000)
0000b5 e0b3      	LDI  R27,HIGH(1000)
0000b6 d122      	RCALL _delay_ms
                 ; 0000 0072 	lcd_gotoxy(0, 1);
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 d10c      	RCALL SUBOPT_0x2
                 ; 0000 0073 	lcd_puts("T: ");
                +
0000b9 e6ab     +LDI R26 , LOW ( _0x1A + ( 11 ) )
0000ba e0b1     +LDI R27 , HIGH ( _0x1A + ( 11 ) )
                 	__POINTW2MN _0x1A,11
0000bb d096      	RCALL _lcd_puts
                 ; 0000 0074 	lcd_gotoxy(7, 1);
0000bc e0e7      	LDI  R30,LOW(7)
0000bd d107      	RCALL SUBOPT_0x2
                 ; 0000 0075 	lcd_puts("H: ");
                +
0000be e6af     +LDI R26 , LOW ( _0x1A + ( 15 ) )
0000bf e0b1     +LDI R27 , HIGH ( _0x1A + ( 15 ) )
                 	__POINTW2MN _0x1A,15
0000c0 d091      	RCALL _lcd_puts
                 ; 0000 0076 
                 ; 0000 0077 
                 ; 0000 0078 	while (1)
                 _0x1B:
                 ; 0000 0079 	{
                 ; 0000 007A 		request();
0000c1 dfb5      	RCALL _request
                 ; 0000 007B 		response();
0000c2 dfba      	RCALL _response
                 ; 0000 007C 
                 ; 0000 007D 		i_rh   = recive();
0000c3 dfce      	RCALL _recive
0000c4 2e7e      	MOV  R7,R30
                 ; 0000 007E 		d_rh   = recive();
0000c5 dfcc      	RCALL _recive
0000c6 2e6e      	MOV  R6,R30
                 ; 0000 007F 		i_temp = recive();
0000c7 dfca      	RCALL _recive
0000c8 2e9e      	MOV  R9,R30
                 ; 0000 0080 		d_temp = recive();
0000c9 dfc8      	RCALL _recive
0000ca 2e8e      	MOV  R8,R30
                 ; 0000 0081 		check  = recive();
0000cb dfc6      	RCALL _recive
0000cc 2ebe      	MOV  R11,R30
                 ; 0000 0082 
                 ; 0000 0083 		if ((i_rh + d_rh + i_temp + d_temp) != check)
0000cd 2da7      	MOV  R26,R7
0000ce 27bb      	CLR  R27
0000cf 27ee      	CLR  R30
0000d0 0da6      	ADD  R26,R6
0000d1 1fbe      	ADC  R27,R30
0000d2 27ee      	CLR  R30
0000d3 0da9      	ADD  R26,R9
0000d4 1fbe      	ADC  R27,R30
0000d5 27ee      	CLR  R30
0000d6 0da8      	ADD  R26,R8
0000d7 1fbe      	ADC  R27,R30
0000d8 2deb      	MOV  R30,R11
0000d9 e0f0      	LDI  R31,0
0000da 17ea      	CP   R30,R26
0000db 07fb      	CPC  R31,R27
0000dc f051      	BREQ _0x1E
                 ; 0000 0084 		{
                 ; 0000 0085 			lcd_gotoxy(3, 1);
0000dd e0e3      	LDI  R30,LOW(3)
0000de d0e6      	RCALL SUBOPT_0x2
                 ; 0000 0086 			lcd_puts("E");
                +
0000df e7a3     +LDI R26 , LOW ( _0x1A + ( 19 ) )
0000e0 e0b1     +LDI R27 , HIGH ( _0x1A + ( 19 ) )
                 	__POINTW2MN _0x1A,19
0000e1 d070      	RCALL _lcd_puts
                 ; 0000 0087 
                 ; 0000 0088 			lcd_gotoxy(10, 1);
0000e2 e0ea      	LDI  R30,LOW(10)
0000e3 d0e1      	RCALL SUBOPT_0x2
                 ; 0000 0089 			lcd_puts("E");
                +
0000e4 e7a5     +LDI R26 , LOW ( _0x1A + ( 21 ) )
0000e5 e0b1     +LDI R27 , HIGH ( _0x1A + ( 21 ) )
                 	__POINTW2MN _0x1A,21
0000e6 c00b      	RJMP _0x21
                 ; 0000 008A 		} else
                 _0x1E:
                 ; 0000 008B 		{
                 ; 0000 008C 			itoa(i_rh, data);
0000e7 2de7      	MOV  R30,R7
0000e8 d0df      	RCALL SUBOPT_0x3
                 ; 0000 008D 			lcd_gotoxy(3, 1);
0000e9 e0e3      	LDI  R30,LOW(3)
0000ea d0da      	RCALL SUBOPT_0x2
                 ; 0000 008E 			lcd_puts(data);
0000eb 01de      	MOVW R26,R28
0000ec d065      	RCALL _lcd_puts
                 ; 0000 008F 
                 ; 0000 0090 
                 ; 0000 0091 			itoa(i_temp, data);
0000ed 2de9      	MOV  R30,R9
0000ee d0d9      	RCALL SUBOPT_0x3
                 ; 0000 0092 			lcd_gotoxy(10, 1);
0000ef e0ea      	LDI  R30,LOW(10)
0000f0 d0d4      	RCALL SUBOPT_0x2
                 ; 0000 0093 			lcd_puts(data);
0000f1 01de      	MOVW R26,R28
                 _0x21:
0000f2 d05f      	RCALL _lcd_puts
                 ; 0000 0094 		}
                 ; 0000 0095 
                 ; 0000 0096 	}
0000f3 cfcd      	RJMP _0x1B
                 ; 0000 0097 }
                 _0x20:
0000f4 cfff      	RJMP _0x20
                 ; .FEND
                 
                 	.DSEG
                 _0x1A:
000160           	.BYTE 0x17
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000f5 93aa      	ST   -Y,R26
0000f6 81e8      	LD   R30,Y
0000f7 71e0      	ANDI R30,LOW(0x10)
0000f8 f011      	BREQ _0x2000004
0000f9 9a94      	SBI  0x12,4
0000fa c001      	RJMP _0x2000005
                 _0x2000004:
0000fb 9894      	CBI  0x12,4
                 _0x2000005:
0000fc 81e8      	LD   R30,Y
0000fd 72e0      	ANDI R30,LOW(0x20)
0000fe f011      	BREQ _0x2000006
0000ff 9a93      	SBI  0x12,3
000100 c001      	RJMP _0x2000007
                 _0x2000006:
000101 9893      	CBI  0x12,3
                 _0x2000007:
000102 81e8      	LD   R30,Y
000103 74e0      	ANDI R30,LOW(0x40)
000104 f011      	BREQ _0x2000008
000105 9a92      	SBI  0x12,2
000106 c001      	RJMP _0x2000009
                 _0x2000008:
000107 9892      	CBI  0x12,2
                 _0x2000009:
000108 81e8      	LD   R30,Y
000109 78e0      	ANDI R30,LOW(0x80)
00010a f011      	BREQ _0x200000A
00010b 9a91      	SBI  0x12,1
00010c c001      	RJMP _0x200000B
                 _0x200000A:
00010d 9891      	CBI  0x12,1
                 _0x200000B:
00010e d0bf      	RCALL SUBOPT_0x4
00010f 9a95      	SBI  0x12,5
000110 d0bd      	RCALL SUBOPT_0x4
000111 9895      	CBI  0x12,5
000112 d0bb      	RCALL SUBOPT_0x4
000113 c078      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000114 93aa      	ST   -Y,R26
000115 81a8      	LD   R26,Y
000116 dfde      	RCALL __lcd_write_nibble_G100
000117 81e8          ld    r30,y
000118 95e2          swap  r30
000119 83e8          st    y,r30
00011a 81a8      	LD   R26,Y
00011b dfd9      	RCALL __lcd_write_nibble_G100
                +
00011c e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00011d 958a     +DEC R24
00011e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00011f c06c      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000120 93aa      	ST   -Y,R26
000121 81e8      	LD   R30,Y
000122 e0f0      	LDI  R31,0
000123 58e9      	SUBI R30,LOW(-__base_y_G100)
000124 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000125 81e0      	LD   R30,Z
000126 81a9      	LDD  R26,Y+1
000127 0fae      	ADD  R26,R30
000128 dfeb      	RCALL __lcd_write_data
000129 80d9      	LDD  R13,Y+1
00012a 80c8      	LDD  R12,Y+0
00012b 9622      	ADIW R28,2
00012c 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00012d e0a2      	LDI  R26,LOW(2)
00012e dfe5      	RCALL __lcd_write_data
00012f e0a3      	LDI  R26,LOW(3)
000130 d08b      	RCALL SUBOPT_0x0
000131 e0ac      	LDI  R26,LOW(12)
000132 dfe1      	RCALL __lcd_write_data
000133 e0a1      	LDI  R26,LOW(1)
000134 dfdf      	RCALL __lcd_write_data
000135 e0a3      	LDI  R26,LOW(3)
000136 d085      	RCALL SUBOPT_0x0
000137 e0e0      	LDI  R30,LOW(0)
000138 2ece      	MOV  R12,R30
000139 2ede      	MOV  R13,R30
00013a 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00013b 93aa      	ST   -Y,R26
00013c 81a8      	LD   R26,Y
00013d 30aa      	CPI  R26,LOW(0xA)
00013e f021      	BREQ _0x2000011
00013f 91e0 017b 	LDS  R30,__lcd_maxx
000141 16de      	CP   R13,R30
000142 f048      	BRLO _0x2000010
                 _0x2000011:
000143 e0e0      	LDI  R30,LOW(0)
000144 93ea      	ST   -Y,R30
000145 94c3      	INC  R12
000146 2dac      	MOV  R26,R12
000147 dfd8      	RCALL _lcd_gotoxy
000148 81a8      	LD   R26,Y
000149 30aa      	CPI  R26,LOW(0xA)
00014a f409      	BRNE _0x2000013
00014b c040      	RJMP _0x20C0001
                 _0x2000013:
                 _0x2000010:
00014c 94d3      	INC  R13
00014d 9a97      	SBI  0x12,7
00014e 81a8      	LD   R26,Y
00014f dfc4      	RCALL __lcd_write_data
000150 9897      	CBI  0x12,7
000151 c03a      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000152 93ba      	ST   -Y,R27
000153 93aa      	ST   -Y,R26
000154 931a      	ST   -Y,R17
                 _0x2000014:
000155 81a9      	LDD  R26,Y+1
000156 81ba      	LDD  R27,Y+1+1
000157 91ed      	LD   R30,X+
000158 83a9      	STD  Y+1,R26
000159 83ba      	STD  Y+1+1,R27
00015a 2f1e      	MOV  R17,R30
00015b 30e0      	CPI  R30,0
00015c f019      	BREQ _0x2000016
00015d 2fa1      	MOV  R26,R17
00015e dfdc      	RCALL _lcd_putchar
00015f cff5      	RJMP _0x2000014
                 _0x2000016:
000160 8118      	LDD  R17,Y+0
000161 9623      	ADIW R28,3
000162 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000163 93aa      	ST   -Y,R26
000164 9a8c      	SBI  0x11,4
000165 9a8b      	SBI  0x11,3
000166 9a8a      	SBI  0x11,2
000167 9a89      	SBI  0x11,1
000168 9a8d      	SBI  0x11,5
000169 9a8f      	SBI  0x11,7
00016a 9a8e      	SBI  0x11,6
00016b 9895      	CBI  0x12,5
00016c 9897      	CBI  0x12,7
00016d 9896      	CBI  0x12,6
00016e 81e8      	LD   R30,Y
00016f 93e0 017b 	STS  __lcd_maxx,R30
000171 58e0      	SUBI R30,-LOW(128)
                +
000172 93e0 0179+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000174 81e8      	LD   R30,Y
000175 54e0      	SUBI R30,-LOW(192)
                +
000176 93e0 017a+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000178 e1a4      	LDI  R26,LOW(20)
000179 d042      	RCALL SUBOPT_0x0
00017a d057      	RCALL SUBOPT_0x5
00017b d056      	RCALL SUBOPT_0x5
00017c d055      	RCALL SUBOPT_0x5
00017d e2a0      	LDI  R26,LOW(32)
00017e df76      	RCALL __lcd_write_nibble_G100
                +
00017f ec88     +LDI R24 , LOW ( 200 )
000180 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000181 9701     +SBIW R24 , 1
000182 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000183 e2a8      	LDI  R26,LOW(40)
000184 df8f      	RCALL __lcd_write_data
000185 e0a4      	LDI  R26,LOW(4)
000186 df8d      	RCALL __lcd_write_data
000187 e8a5      	LDI  R26,LOW(133)
000188 df8b      	RCALL __lcd_write_data
000189 e0a6      	LDI  R26,LOW(6)
00018a df89      	RCALL __lcd_write_data
00018b dfa1      	RCALL _lcd_clear
                 _0x20C0001:
00018c 9621      	ADIW R28,1
00018d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
00018e 93ba      	ST   -Y,R27
00018f 93aa      	ST   -Y,R26
000190 91a9          ld   r26,y+
000191 91b9          ld   r27,y+
000192 91e9          ld   r30,y+
000193 91f9          ld   r31,y+
000194 9630          adiw r30,0
000195 f42a          brpl __itoa0
000196 95e0          com  r30
000197 95f0          com  r31
000198 9631          adiw r30,1
000199 e26d          ldi  r22,'-'
00019a 936d          st   x+,r22
                 __itoa0:
00019b 94e8          clt
00019c e180          ldi  r24,low(10000)
00019d e297          ldi  r25,high(10000)
00019e d00d          rcall __itoa1
00019f ee88          ldi  r24,low(1000)
0001a0 e093          ldi  r25,high(1000)
0001a1 d00a          rcall __itoa1
0001a2 e684          ldi  r24,100
0001a3 2799          clr  r25
0001a4 d007          rcall __itoa1
0001a5 e08a          ldi  r24,10
0001a6 d005          rcall __itoa1
0001a7 2f6e          mov  r22,r30
0001a8 d010          rcall __itoa5
0001a9 2766          clr  r22
0001aa 936c          st   x,r22
0001ab 9508          ret
                 
                 __itoa1:
0001ac 2766          clr	 r22
                 __itoa2:
0001ad 17e8          cp   r30,r24
0001ae 07f9          cpc  r31,r25
0001af f020          brlo __itoa3
0001b0 9563          inc  r22
0001b1 1be8          sub  r30,r24
0001b2 0bf9          sbc  r31,r25
0001b3 f7c9          brne __itoa2
                 __itoa3:
0001b4 2366          tst  r22
0001b5 f411          brne __itoa4
0001b6 f016          brts __itoa5
0001b7 9508          ret
                 __itoa4:
0001b8 9468          set
                 __itoa5:
0001b9 5d60          subi r22,-0x30
0001ba 936d          st   x+,r22
0001bb 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G100:
000177           	.BYTE 0x4
                 __lcd_maxx:
00017b           	.BYTE 0x1
                 __seed_G101:
00017c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001bc e0b0      	LDI  R27,0
0001bd c01b      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
                +
0001be e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
0001bf 958a     +DEC R24
0001c0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
0001c1 94a3      	INC  R10
0001c2 e0e2      	LDI  R30,LOW(2)
0001c3 15ea      	CP   R30,R10
0001c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
0001c5 93ea      	ST   -Y,R30
0001c6 e0a1      	LDI  R26,LOW(1)
0001c7 cf58      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0001c8 e0f0      	LDI  R31,0
0001c9 93fa      	ST   -Y,R31
0001ca 93ea      	ST   -Y,R30
0001cb 01de      	MOVW R26,R28
0001cc 9612      	ADIW R26,2
0001cd cfc0      	RJMP _itoa
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
                +
0001ce e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001cf 958a     +DEC R24
0001d0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x5:
0001d2 e3a0      	LDI  R26,LOW(48)
0001d3 df21      	RCALL __lcd_write_nibble_G100
                +
0001d4 ec88     +LDI R24 , LOW ( 200 )
0001d5 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001d6 9701     +SBIW R24 , 1
0001d7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001d8 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001d9 9610      	adiw r26,0
0001da f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001db ed80     +LDI R24 , LOW ( 0x7D0 )
0001dc e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001dd 9701     +SBIW R24 , 1
0001de f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001df 95a8      	wdr
0001e0 9711      	sbiw r26,1
0001e1 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001e2 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   3 r6 :   2 r7 :   3 
r8 :   2 r9 :   3 r10:   6 r11:   2 r12:   4 r13:   4 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  29 r25:  10 r26:  57 r27:  19 r28:   8 r29:   1 r30:  89 r31:  13 
x  :   7 y  :  41 z  :   8 
Registers used: 25 out of 35 (71.4%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   4 
adiw  :   7 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   9 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  15 brpl  :   1 brsh  :   4 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  11 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  12 
cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 cp    :   6 
cpc   :   2 cpi   :   3 cpse  :   0 dec   :   6 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 
inc   :   6 ld    :  19 ldd   :   6 ldi   :  74 lds   :   1 lpm   :   7 
lsl   :   2 lsr   :   0 mov   :  18 movw  :   6 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   1 out   :   6 
pop   :   0 push  :   0 rcall :  58 ret   :  14 reti  :   0 rjmp  :  44 
rol   :   0 ror   :   0 sbc   :   1 sbci  :   1 sbi   :  15 sbic  :   2 
sbis  :   4 sbiw  :   8 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  22 std   :   2 
sts   :   3 sub   :   1 subi  :   4 swap  :   1 tst   :   1 wdr   :   1 

Instructions used: 48 out of 114 (42.1%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003c6    854    112    966    8192  11.8%
[.dseg] 0x000060 0x000180      0     32     32    1024   3.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 14 warnings
