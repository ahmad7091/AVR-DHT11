;/*
; * main.c
; *
; * Created: 4/1/2018 2:04:40 AM
; * Author: mrsfdri
; */
;
;// add header file
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <mega8.h>
;// delay
;#include <delay.h>
;// lcd
;#include <alcd.h>
;// convert bit to number
;#include <stdlib.h>
;#include <stdio.h>
;
;// count bit
;unsigned char bit_count = 0;
;// feedback count bit return
;unsigned char c = 0;
;// temperature and humidity value
;unsigned char i_rh, d_rh, i_temp, d_temp, check;
;// loop count
;unsigned char cl = 0;
;
;//***** start methods *****//
;
;void request(void)
; 0000 001F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0020 	// DDRD.6 = 1;
; 0000 0021 	DDRD |= (1<<0);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0022 
; 0000 0023 	// PORTD.6 = 0;
; 0000 0024 	PORTD &= ~(1<<0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0025 
; 0000 0026 	// delay_ms(18);
; 0000 0027 	delay_ms(18);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0028 
; 0000 0029 	// PORTD.6 = 1;
; 0000 002A 	PORTD |= (1<<0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002B }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;
;
;
;void response()
; 0000 0030 {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0031 	// PIND
; 0000 0032 	DDRD &= ~(1<<0);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0033 
; 0000 0034 	while(PIND & (1<<0))
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0035 	{
; 0000 0036 		delay_us(1);
;PCODE: $00000022 VOL: 0
; 0000 0037 		cl++;
;PCODE: $00000023 VOL: 0
; 0000 0038 		if (cl > 80) break;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0039 	}
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003A 
; 0000 003B 	cl = 0;
;PCODE: $0000002B VOL: 0
; 0000 003C 	while((PIND & (1<<0))==0)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003D 	{
; 0000 003E 		delay_us(40);
;PCODE: $00000030 VOL: 0
; 0000 003F 		cl++;
;PCODE: $00000031 VOL: 0
; 0000 0040 		if (cl > 2) break;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0041 	}
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0042 
; 0000 0043 	cl = 0;
;PCODE: $00000039 VOL: 0
; 0000 0044 	while(PIND & (1<<0))
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0045 	{
; 0000 0046 		delay_us(40);
;PCODE: $0000003E VOL: 0
; 0000 0047 		cl++;
;PCODE: $0000003F VOL: 0
; 0000 0048 		if (cl > 2) break;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0049 	}
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 004A }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;
;
;unsigned char recive()
; 0000 004F {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0050 	while(bit_count<8)
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0051 	{
; 0000 0052 		bit_count++;
;PCODE: $0000004F VOL: 0
; 0000 0053 
; 0000 0054 		while((PIND & (1<<0))==0);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0055 
; 0000 0056 		delay_us(30);
;PCODE: $00000056 VOL: 0
; 0000 0057 
; 0000 0058 		if(PIND & (1<<0))
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0059 		{
; 0000 005A 			c=(c<<1)|(0x01);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 005B 		} else {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 005C 			c=c<<1;
;PCODE: $00000060 VOL: 0
; 0000 005D 		}
;PCODE: $00000061 VOL: 0
; 0000 005E 		while(PIND & (1<<0));
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 005F 	}
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0060 
; 0000 0061 	bit_count=0;
;PCODE: $0000006A VOL: 0
; 0000 0062 
; 0000 0063 	return c;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0064 }
;PCODE: $0000006D VOL: 0
;
;void main(void)
; 0000 0067 {
;PCODE: $0000006E VOL: 0
; 0000 0068 	unsigned char data[5];
; 0000 0069 
; 0000 006A 	// Initial LCD
; 0000 006B 	lcd_init(16);
;PCODE: $0000006F VOL: 0
;	data -> Y+0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 006C 
; 0000 006D 
; 0000 006E 	lcd_clear();
;PCODE: $00000072 VOL: 0
; 0000 006F 	lcd_gotoxy(0, 0);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0070 	lcd_puts("GeekTab.ir");
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0071 	delay_ms(1000);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0072 	lcd_gotoxy(0, 1);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0073 	lcd_puts("H: ");
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0074 	lcd_gotoxy(7, 1);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0075 	lcd_puts("T: ");
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0076 
; 0000 0077 
; 0000 0078 	while (1)
;PCODE: $0000008A VOL: 0
; 0000 0079 	{
; 0000 007A 		delay_ms(1000);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 007B 		request();
;PCODE: $0000008D VOL: 0
; 0000 007C 		response();
;PCODE: $0000008E VOL: 0
; 0000 007D 
; 0000 007E 		i_rh   = recive();
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 007F 		d_rh   = recive();
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0080 		i_temp = recive();
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0081 		d_temp = recive();
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0082 		check  = recive();
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0083 
; 0000 0084 		if ((i_rh + d_rh + i_temp + d_temp) != check)
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0085 		{
; 0000 0086 			lcd_gotoxy(3, 1);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0087 			lcd_puts("E");
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0088 
; 0000 0089 			lcd_gotoxy(10, 1);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 008A 			lcd_puts("E");
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 008B 		} else
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 008C 		{
; 0000 008D 			itoa(i_rh, data);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 008E 			lcd_gotoxy(3, 1);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 008F 			lcd_puts(data);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0090 
; 0000 0091 
; 0000 0092 			itoa(i_temp, data);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0093 			lcd_gotoxy(10, 1);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0094 			lcd_puts(data);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0095 		}
;PCODE: $000000C8 VOL: 0
; 0000 0096 		delay_ms(1000);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0097 	}
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0098 }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0

	.DSEG
_0x1A:
	.BYTE 0x17
